#!/usr/bin/env python3
import stack_info
import os, time

answer = ''
while answer not in ['r', 'l']:
    answer = input("Enter 'l' to use localstack, or 'r' to use the 'real' AWS) > ").lower()
use_localstack = ( answer=="l")
if use_localstack:
    print("Will use localstack")
else:
    print("Will use the 'real' AWS")
print()

# Check if the stack we are about to create already exists
si = stack_info.StackInfo(use_localstack)
num_stacks = si.get_num_stacks()
if si.connection_success_msg:
    print(si.connection_success_msg)
    print("Aborting")
    exit()
print("Before we start the creation of a new stack, there are",num_stacks, "stack(s).")
status = si.get_stack_status("test1")
if status!=None:
    print("Stack 'test1' pre-exists - Aborintg")
    print("   If you use localstak: restarting localstack will help")
    print("   If you use the 'real' AWS: Delete the exissting stack")
    print("   WARNING: the above two actions might erase all your table data.")
    exit()

os.system("rm -f cdk_template/template_as_generated_by_cdk.yaml")
print("Generating CloudFormatioon template JSON using CDK")
cmd = f'export USE_LOCALSTACK={use_localstack}; cd cdk_template; cdk synth >template_as_generated_by_cdk.yaml'
ans = os.popen(cmd).read()
template_file_size = os.path.getsize('cdk_template/template_as_generated_by_cdk.yaml')
if template_file_size<100:
    print("CDK did not genrete template file - Aborting")
    exit()

print("Stripping the CloudFormatioon template of CDK metadata")
cmd = "./clean_template"
ans = os.popen(cmd).read()
print(ans)

print("Deploying the AWS resources defined in the template, using CloudFormation")
cmd = 'aws cloudformation create-stack \\\n'
if use_localstack:
    cmd += '  --endpoint-url http://localhost:4566 \\\n'
cmd += '''\
  --stack-name test1 \\
  --template-body file://template.yaml --capabilities CAPABILITY_IAM
'''
ans = os.popen(cmd).read()
print("Anser to 'create stack' command:")
print(ans)
if ans=='Could not connect to the endpoint URL: "http://localhost:4566/"':
    print("Aborting - maybe you need to run localstack at a different terminal ?")


print("\nStack status:")
stack_status = si.get_stack_status('test1') 
print("   ", stack_status)

while stack_status=='CREATE_IN_PROGRESS':
    print("    Waiting for stack creation to complete")   # Need add time out
    time.sleep(1)
    stack_status = si.get_stack_status('test1') 

print("\nStack final status:")
print("   ", stack_status)

if stack_status=="CREATE_FAILED":
    print("Aborting, because stack creation has failed")
    exit()

os.system("rm -f ../set_stack_env_vars")
print("\nStack outputs:")
outputs = si.get_stack_outputs('test1')
outputs.append( {'OutputKey': "USE_LOCALSTACK", 'OutputValue': str(use_localstack)} )
for output in outputs:
    key =  output['OutputKey']; val = output['OutputValue'] 
    print("   ", key, val)
    open("../set_stack_env_vars", 'a').write(f'export {key}={val}\n')
os.system('chmod +x ../set_stack_env_vars')
print("Created the script '../set_stack_env_vars'")

print("Fixing lambdas by uploading full zip:")
res = os.popen("cd ..; . ./set_stack_env_vars; ./update_lambdas").read()
print(res)

print("Recomended next steps:")
print("   Run: . ../set_stack_env_vars")
print("   Run: ./populate_tables")


