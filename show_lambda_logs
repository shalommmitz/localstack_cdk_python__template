#!/usr/bin/env python3

import boto3
import os
from datetime import datetime, timedelta
use_localstack = False
if "USE_LOCALSTACK" in os.environ.keys():
   if os.environ["USE_LOCALSTACK"].lower()=="true":
       use_localstack = True

if use_localstack:
    client = boto3.client('logs', endpoint_url="http://localhost:4566")
else:
    client = boto3.client('logs')

paginator = client.get_paginator('describe_log_groups')
groups = {}
for page in paginator.paginate():
    for group in page['logGroups']:
        group_name = group["logGroupName"]
        groups[group_name] = []
        print(f'Found group: {group_name}')

event_times = {}
for group_name in groups.keys():
    paginator = client.get_paginator('describe_log_streams')
    streams = []
    for page in paginator.paginate( logGroupName=group_name, orderBy='LastEventTime', descending=False):
        for stream in page["logStreams"]:
            groups[group_name].append(stream["logStreamName"])
            event_times[stream["lastEventTimestamp"]] = (group_name, stream["logStreamName"])
            #print(group_name, stream["logStreamName"])
#most_recent = max(list(event_times.keys()))
#group_name = event_times[most_recent][0]
#stream_name = event_times[most_recent][1]
#now = datetime.now()
#a_minute_ago = int((now-timedelta(seconds=60)).strftime('%s'))*1000
#events = client.get_log_events(
#    logGroupName=group_name,
#    logStreamName=stream_name,
#    #startTime=a_minute_ago
#)["events"]
dont_display_prefixes = ["START", "END", "REPORT"]
#for event in events:
#    time_stamp_seconds = int(event["timestamp"]/1000)
#    time_stamp = datetime.fromtimestamp(time_stamp_seconds).strftime( "%Y %b %d %H %M  %S")

#    msg = time_stamp+" "+ event["message"]
#    dont_display = False
#    for prefix in dont_display_prefixes:
#        if msg.startswith(prefix):
#            dont_display = True
#            break
#    if not dont_display:
#        print("\n"+msg)


#exit()
for group_name in groups.keys():
    for stream in groups[group_name]:
        print("stream",stream)
        events = client.get_log_events(
            logGroupName=group_name,
            logStreamName=stream,
        )["events"]
        for event in events:
            time_stamp_seconds = int(event["timestamp"]/1000)
            time_stamp = datetime.fromtimestamp(time_stamp_seconds).strftime( "%d %H:%M.%S")
            msg = event["message"]
            dont_display = False
            for prefix in dont_display_prefixes:
                if msg.startswith(prefix):
                    dont_display = True
                    break
            if not dont_display:
                print("\n"+time_stamp+" "+msg)

